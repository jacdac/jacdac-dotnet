/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Supports cloud connections for Jacscript programs.
     /// Note that `f64` values following a label are not necessarily aligned.
    /// Implements a client for the Jacscript Cloud service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/jacscriptcloud/" />
    public partial class JacscriptCloudClient : Client
    {
        public JacscriptCloudClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.JacscriptCloud)
        {
        }

        /// <summary>
        /// Reads the <c>connected</c> register value.
        /// Indicate whether we're currently connected to the cloud server.
        /// When offline, `upload` commands are queued, and `get_twin` respond with cached values., 
        /// </summary>
        public bool Connected
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)JacscriptCloudReg.Connected, JacscriptCloudRegPack.Connected);
            }
        }

        /// <summary>
        /// Emitted when a twin is updated at given path.
        /// It will be also emitted once immediately after `subscribe_twin`.
        /// </summary>
        public event ClientEventHandler TwinChanged
        {
            add
            {
                this.AddEvent((ushort)JacscriptCloudEvent.TwinChanged, value);
            }
            remove
            {
                this.RemoveEvent((ushort)JacscriptCloudEvent.TwinChanged, value);
            }
        }

        /// <summary>
        /// Emitted when cloud requests jacscript to run some action.
        /// </summary>
        public event ClientEventHandler CloudCommand
        {
            add
            {
                this.AddEvent((ushort)JacscriptCloudEvent.CloudCommand, value);
            }
            remove
            {
                this.RemoveEvent((ushort)JacscriptCloudEvent.CloudCommand, value);
            }
        }


        
        /// <summary>
        /// Get a numeric field from the current device twin.
        /// Path is dot-separated.
        /// </summary>
        public void GetTwin(string path)
        {
            this.SendCmdPacked((ushort)JacscriptCloudCmd.GetTwin, JacscriptCloudCmdPack.GetTwin, new object[] { path });
        }

        
        /// <summary>
        /// Subscribe to updates to twin at specific path.
        /// Generates `twin_changed` events.
        /// </summary>
        public void SubscribeTwin(string path)
        {
            this.SendCmdPacked((ushort)JacscriptCloudCmd.SubscribeTwin, JacscriptCloudCmdPack.SubscribeTwin, new object[] { path });
        }

    }
}