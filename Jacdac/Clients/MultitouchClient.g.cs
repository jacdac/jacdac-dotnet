/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A capacitive touch sensor with multiple inputs.
    /// Implements a client for the Multitouch service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/multitouch/" />
    public partial class MultitouchClient : Client
    {
        public MultitouchClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Multitouch)
        {
        }

        /// <summary>
        /// Emitted when an input is touched.
        /// </summary>
        public event ClientEventHandler Touch
        {
            add
            {
                this.AddEvent((ushort)MultitouchEvent.Touch, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MultitouchEvent.Touch, value);
            }
        }

        /// <summary>
        /// Emitted when an input is no longer touched.
        /// </summary>
        public event ClientEventHandler Release
        {
            add
            {
                this.AddEvent((ushort)MultitouchEvent.Release, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MultitouchEvent.Release, value);
            }
        }

        /// <summary>
        /// Emitted when an input is briefly touched. TODO Not implemented.
        /// </summary>
        public event ClientEventHandler Tap
        {
            add
            {
                this.AddEvent((ushort)MultitouchEvent.Tap, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MultitouchEvent.Tap, value);
            }
        }

        /// <summary>
        /// Emitted when an input is touched for longer than 500ms. TODO Not implemented.
        /// </summary>
        public event ClientEventHandler LongPress
        {
            add
            {
                this.AddEvent((ushort)MultitouchEvent.LongPress, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MultitouchEvent.LongPress, value);
            }
        }

        /// <summary>
        /// Emitted when input channels are successively touched in order of increasing channel numbers.
        /// </summary>
        public event ClientEventHandler SwipePos
        {
            add
            {
                this.AddEvent((ushort)MultitouchEvent.SwipePos, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MultitouchEvent.SwipePos, value);
            }
        }

        /// <summary>
        /// Emitted when input channels are successively touched in order of decreasing channel numbers.
        /// </summary>
        public event ClientEventHandler SwipeNeg
        {
            add
            {
                this.AddEvent((ushort)MultitouchEvent.SwipeNeg, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MultitouchEvent.SwipeNeg, value);
            }
        }


    }
}