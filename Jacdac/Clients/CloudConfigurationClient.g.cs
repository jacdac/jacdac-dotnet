/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Connection and diagnostics information about the cloud connection.
    /// Implements a client for the Cloud Configuration service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/cloudconfiguration/" />
    public partial class CloudConfigurationClient : Client
    {
        public CloudConfigurationClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.CloudConfiguration)
        {
        }

        /// <summary>
        /// Tries to read the <c>server_name</c> register value.
        /// Something like `my-iot-hub.azure-devices.net` if available., 
        /// </summary>
        bool TryGetServerName(out string value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)CloudConfigurationReg.ServerName, CloudConfigurationRegPack.ServerName, out values)) 
            {
                value = (string)values[0];
                return true;
            }
            else
            {
                value = default(string);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>cloud_device_id</c> register value.
        /// Device identifier for the device in the cloud if available., 
        /// </summary>
        bool TryGetCloudDeviceId(out string value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)CloudConfigurationReg.CloudDeviceId, CloudConfigurationRegPack.CloudDeviceId, out values)) 
            {
                value = (string)values[0];
                return true;
            }
            else
            {
                value = default(string);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>cloud_type</c> register value.
        /// Cloud provider identifier., 
        /// </summary>
        bool TryGetCloudType(out string value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)CloudConfigurationReg.CloudType, CloudConfigurationRegPack.CloudType, out values)) 
            {
                value = (string)values[0];
                return true;
            }
            else
            {
                value = default(string);
                return false;
            }
        }

        /// <summary>
        /// Reads the <c>connection_status</c> register value.
        /// Indicates the status of connection. A message beyond the [0..3] range represents an HTTP error code., 
        /// </summary>
        public CloudConfigurationConnectionStatus ConnectionStatus
        {
            get
            {
                return (CloudConfigurationConnectionStatus)this.GetRegisterValue((ushort)CloudConfigurationReg.ConnectionStatus, CloudConfigurationRegPack.ConnectionStatus);
            }
        }

        /// <summary>
        /// Reads the <c>push_period</c> register value.
        /// How often to push data to the cloud., _: ms
        /// </summary>
        public uint PushPeriod
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)CloudConfigurationReg.PushPeriod, CloudConfigurationRegPack.PushPeriod);
            }
            set
            {
                
                this.SetRegisterValue((ushort)CloudConfigurationReg.PushPeriod, CloudConfigurationRegPack.PushPeriod, value);
            }

        }

        /// <summary>
        /// Reads the <c>push_watchdog_period</c> register value.
        /// If no message is published within given period, the device resets.
        /// This can be due to connectivity problems or due to the device having nothing to publish.
        /// Forced to be at least `2 * flush_period`.
        /// Set to `0` to disable (default)., _: ms
        /// </summary>
        public uint PushWatchdogPeriod
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)CloudConfigurationReg.PushWatchdogPeriod, CloudConfigurationRegPack.PushWatchdogPeriod);
            }
            set
            {
                
                this.SetRegisterValue((ushort)CloudConfigurationReg.PushWatchdogPeriod, CloudConfigurationRegPack.PushWatchdogPeriod, value);
            }

        }

        /// <summary>
        /// Raised when the connection status changes
        /// </summary>
        public event ClientEventHandler ConnectionStatusChange
        {
            add
            {
                this.AddEvent((ushort)CloudConfigurationEvent.ConnectionStatusChange, value);
            }
            remove
            {
                this.RemoveEvent((ushort)CloudConfigurationEvent.ConnectionStatusChange, value);
            }
        }

        /// <summary>
        /// Raised when a message has been sent to the hub.
        /// </summary>
        public event ClientEventHandler MessageSent
        {
            add
            {
                this.AddEvent((ushort)CloudConfigurationEvent.MessageSent, value);
            }
            remove
            {
                this.RemoveEvent((ushort)CloudConfigurationEvent.MessageSent, value);
            }
        }


    }
}