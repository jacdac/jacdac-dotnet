/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A matrix of buttons connected as a keypad
    /// Implements a client for the Matrix Keypad service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/matrixkeypad/" />
    public partial class MatrixKeypadClient : Client
    {
        public MatrixKeypadClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.MatrixKeypad)
        {
        }

        /// <summary>
        /// Reads the <c>rows</c> register value.
        /// Number of rows in the matrix, _: #
        /// </summary>
        public uint Rows
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)MatrixKeypadReg.Rows, MatrixKeypadRegPack.Rows);
            }
        }

        /// <summary>
        /// Reads the <c>columns</c> register value.
        /// Number of columns in the matrix, _: #
        /// </summary>
        public uint Columns
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)MatrixKeypadReg.Columns, MatrixKeypadRegPack.Columns);
            }
        }

        /// <summary>
        /// Tries to read the <c>variant</c> register value.
        /// The type of physical keypad. If the variant is ``ElastomerLEDPixel``
        /// and the next service on the device is a ``LEDPixel`` service, it is considered
        /// as the service controlling the LED pixel on the keypad., 
        /// </summary>
        bool TryGetVariant(out MatrixKeypadVariant value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)MatrixKeypadReg.Variant, MatrixKeypadRegPack.Variant, out values)) 
            {
                value = (MatrixKeypadVariant)values[0];
                return true;
            }
            else
            {
                value = default(MatrixKeypadVariant);
                return false;
            }
        }

        /// <summary>
        /// Emitted when a key, at the given index, goes from inactive (`pressed == 0`) to active.
        /// </summary>
        public event ClientEventHandler Down
        {
            add
            {
                this.AddEvent((ushort)MatrixKeypadEvent.Down, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MatrixKeypadEvent.Down, value);
            }
        }

        /// <summary>
        /// Emitted when a key, at the given index, goes from active (`pressed == 1`) to inactive.
        /// </summary>
        public event ClientEventHandler Up
        {
            add
            {
                this.AddEvent((ushort)MatrixKeypadEvent.Up, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MatrixKeypadEvent.Up, value);
            }
        }

        /// <summary>
        /// Emitted together with `up` when the press time was not longer than 500ms.
        /// </summary>
        public event ClientEventHandler Click
        {
            add
            {
                this.AddEvent((ushort)MatrixKeypadEvent.Click, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MatrixKeypadEvent.Click, value);
            }
        }

        /// <summary>
        /// Emitted together with `up` when the press time was more than 500ms.
        /// </summary>
        public event ClientEventHandler LongClick
        {
            add
            {
                this.AddEvent((ushort)MatrixKeypadEvent.LongClick, value);
            }
            remove
            {
                this.RemoveEvent((ushort)MatrixKeypadEvent.LongClick, value);
            }
        }


    }
}