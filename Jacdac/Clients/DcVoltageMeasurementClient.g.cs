/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A service that reports a voltage measurement.
    /// Implements a client for the DC Voltage Measurement service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/dcvoltagemeasurement/" />
    public partial class DcVoltageMeasurementClient : SensorClient
    {
        public DcVoltageMeasurementClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.DcVoltageMeasurement)
        {
        }

        /// <summary>
        /// Reads the <c>measurement_type</c> register value.
        /// The type of measurement that is taking place. Absolute results are measured with respect to ground, whereas differential results are measured against another signal that is not ground., 
        /// </summary>
        public DcVoltageMeasurementVoltageMeasurementType MeasurementType
        {
            get
            {
                return (DcVoltageMeasurementVoltageMeasurementType)this.GetRegisterValue((ushort)DcVoltageMeasurementReg.MeasurementType, DcVoltageMeasurementRegPack.MeasurementType);
            }
        }

        /// <summary>
        /// Reads the <c>measurement_name</c> register value.
        /// A string containing the net name that is being measured e.g. `POWER_DUT` or a reference e.g. `DIFF_DEV1_DEV2`. These constants can be used to identify a measurement from client code., 
        /// </summary>
        public string MeasurementName
        {
            get
            {
                return (string)this.GetRegisterValue((ushort)DcVoltageMeasurementReg.MeasurementName, DcVoltageMeasurementRegPack.MeasurementName);
            }
        }

        /// <summary>
        /// Reads the <c>measurement</c> register value.
        /// The voltage measurement., _: V
        /// </summary>
        public float Measurement
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)DcVoltageMeasurementReg.Measurement, DcVoltageMeasurementRegPack.Measurement);
            }
        }

        /// <summary>
        /// Tries to read the <c>measurement_error</c> register value.
        /// Absolute error on the reading value., _: V
        /// </summary>
        bool TryGetMeasurementError(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DcVoltageMeasurementReg.MeasurementError, DcVoltageMeasurementRegPack.MeasurementError, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>min_measurement</c> register value.
        /// Minimum measurable current, _: V
        /// </summary>
        bool TryGetMinMeasurement(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DcVoltageMeasurementReg.MinMeasurement, DcVoltageMeasurementRegPack.MinMeasurement, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>max_measurement</c> register value.
        /// Maximum measurable current, _: V
        /// </summary>
        bool TryGetMaxMeasurement(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DcVoltageMeasurementReg.MaxMeasurement, DcVoltageMeasurementRegPack.MaxMeasurement, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }


    }
}