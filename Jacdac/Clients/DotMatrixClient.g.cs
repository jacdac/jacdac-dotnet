/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A rectangular dot matrix display, made of monochrome LEDs or Braille pins.
    /// Implements a client for the Dot Matrix service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/dotmatrix/" />
    public partial class DotMatrixClient : Client
    {
        public DotMatrixClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.DotMatrix)
        {
        }

        /// <summary>
        /// Reads the <c>dots</c> register value.
        /// The state of the screen where dot on/off state is
        /// stored as a bit, column by column. The column should be byte aligned.
        /// 
        /// For example, if the display has no more than 8 rows in each column, then each byte contains bits corresponding
        /// to a single column. Least-significant bit is on top.
        /// If display has 10 rows, then each column is represented by two bytes.
        /// The top-most 8 rows sit in the first byte (with the least significant bit being on top),
        /// and the remainign 2 row sit in the second byte.
        /// 
        /// The following C expression can be used to check if a given `column, row` coordinate is set:
        /// `dots[column * column_size + (row >> 3)] & (1 << (row & 7))`, where
        /// `column_size` is `(number_of_rows + 7) >> 3` (note that if number of rows is 8 or less then `column_size` is `1`),
        /// and `dots` is of `uint8_t*` type.
        /// 
        /// The size of this register is `number_of_columns * column_size` bytes., 
        /// </summary>
        public byte[] Dots
        {
            get
            {
                return (byte[])this.GetRegisterValue((ushort)DotMatrixReg.Dots, DotMatrixRegPack.Dots);
            }
            set
            {
                
                this.SetRegisterValue((ushort)DotMatrixReg.Dots, DotMatrixRegPack.Dots, value);
            }

        }

        /// <summary>
        /// Tries to read the <c>brightness</c> register value.
        /// Reads the general brightness of the display, brightness for LEDs. `0` when the screen is off., _: /
        /// </summary>
        bool TryGetBrightness(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DotMatrixReg.Brightness, DotMatrixRegPack.Brightness, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }
        
        /// <summary>
        /// Sets the brightness value
        /// </summary>
        public void SetBrightness(float value)
        {
            this.SetRegisterValue((ushort)DotMatrixReg.Brightness, DotMatrixRegPack.Brightness, value);
        }


        /// <summary>
        /// Reads the <c>rows</c> register value.
        /// Number of rows on the screen, _: #
        /// </summary>
        public uint Rows
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)DotMatrixReg.Rows, DotMatrixRegPack.Rows);
            }
        }

        /// <summary>
        /// Reads the <c>columns</c> register value.
        /// Number of columns on the screen, _: #
        /// </summary>
        public uint Columns
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)DotMatrixReg.Columns, DotMatrixRegPack.Columns);
            }
        }

        /// <summary>
        /// Tries to read the <c>variant</c> register value.
        /// Describes the type of matrix used., 
        /// </summary>
        bool TryGetVariant(out DotMatrixVariant value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DotMatrixReg.Variant, DotMatrixRegPack.Variant, out values)) 
            {
                value = (DotMatrixVariant)values[0];
                return true;
            }
            else
            {
                value = default(DotMatrixVariant);
                return false;
            }
        }


    }
}