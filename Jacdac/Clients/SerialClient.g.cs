/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// An asynchronous serial communication service capable of sending and receiving buffers of data.
     /// Settings default to 115200 baud 8N1.
    /// Implements a client for the Serial service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/serial/" />
    public partial class SerialClient : Client
    {
        public SerialClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Serial)
        {
        }

        /// <summary>
        /// Reads the <c>connected</c> register value.
        /// Indicates if the serial connection is active., 
        /// </summary>
        public bool Connected
        {
            get
            {
                return (bool)this.GetRegisterValueAsBool((ushort)SerialReg.Connected, SerialRegPack.Connected);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SerialReg.Connected, SerialRegPack.Connected, value);
            }

        }

        /// <summary>
        /// Tries to read the <c>connection_name</c> register value.
        /// User-friendly name of the connection., 
        /// </summary>
        bool TryGetConnectionName(out string value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)SerialReg.ConnectionName, SerialRegPack.ConnectionName, out values)) 
            {
                value = (string)values[0];
                return true;
            }
            else
            {
                value = default(string);
                return false;
            }
        }

        /// <summary>
        /// Reads the <c>baud_rate</c> register value.
        /// A positive, non-zero value indicating the baud rate at which serial communication is be established., _: baud
        /// </summary>
        public uint BaudRate
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)SerialReg.BaudRate, SerialRegPack.BaudRate);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SerialReg.BaudRate, SerialRegPack.BaudRate, value);
            }

        }

        /// <summary>
        /// Reads the <c>data_bits</c> register value.
        /// The number of data bits per frame. Either 7 or 8., 
        /// </summary>
        public uint DataBits
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)SerialReg.DataBits, SerialRegPack.DataBits);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SerialReg.DataBits, SerialRegPack.DataBits, value);
            }

        }

        /// <summary>
        /// Reads the <c>stop_bits</c> register value.
        /// The number of stop bits at the end of a frame. Either 1 or 2., _: #
        /// </summary>
        public uint StopBits
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)SerialReg.StopBits, SerialRegPack.StopBits);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SerialReg.StopBits, SerialRegPack.StopBits, value);
            }

        }

        /// <summary>
        /// Reads the <c>parity_mode</c> register value.
        /// The parity mode., 
        /// </summary>
        public SerialParityType ParityMode
        {
            get
            {
                return (SerialParityType)this.GetRegisterValue((ushort)SerialReg.ParityMode, SerialRegPack.ParityMode);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SerialReg.ParityMode, SerialRegPack.ParityMode, value);
            }

        }

        /// <summary>
        /// Reads the <c>buffer_size</c> register value.
        /// A positive, non-zero value indicating the size of the read and write buffers that should be created., _: #
        /// </summary>
        public uint BufferSize
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)SerialReg.BufferSize, SerialRegPack.BufferSize);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SerialReg.BufferSize, SerialRegPack.BufferSize, value);
            }

        }


        
        /// <summary>
        /// Send a buffer of data over the serial transport.
        /// </summary>
        public void Send(byte[] data)
        {
            this.SendCmdPacked((ushort)SerialCmd.Send, SerialCmdPack.Send, new object[] { data });
        }

    }
}