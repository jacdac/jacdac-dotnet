/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Defines a binary protocol for IoT devices to talk to DeviceScript gateway over encrypted websockets.
     /// This is not used as a regular Jacdac service.
    /// Implements a client for the WSSK service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/wssk/" />
    public partial class WsskClient : Client
    {
        public WsskClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Wssk)
        {
        }


        
        /// <summary>
        /// Enable/disable forwarding of all Jacdac frames, exception reporting, and `dmesg` streaming.
        /// </summary>
        public void SetStreaming(WsskStreamingType status)
        {
            this.SendCmdPacked((ushort)WsskCmd.SetStreaming, WsskCmdPack.SetStreaming, new object[] { status });
        }

        
        /// <summary>
        /// Send from gateway when it wants to see if the device is alive.
        /// The device currently only support 0-length payload.
        /// </summary>
        public void PingDevice(byte[] payload)
        {
            this.SendCmdPacked((ushort)WsskCmd.PingDevice, WsskCmdPack.PingDevice, new object[] { payload });
        }

        
        /// <summary>
        /// Send from device to gateway to test connection.
        /// </summary>
        public void PingCloud(byte[] payload)
        {
            this.SendCmdPacked((ushort)WsskCmd.PingCloud, WsskCmdPack.PingCloud, new object[] { payload });
        }

        
        /// <summary>
        /// Get SHA256 of the currently deployed program.
        /// </summary>
        public void GetHash()
        {
            this.SendCmd((ushort)WsskCmd.GetHash);
        }

        
        /// <summary>
        /// Start deployment of a new program.
        /// </summary>
        public void DeployStart(uint size)
        {
            this.SendCmdPacked((ushort)WsskCmd.DeployStart, WsskCmdPack.DeployStart, new object[] { size });
        }

        
        /// <summary>
        /// Payload length must be multiple of 32 bytes.
        /// </summary>
        public void DeployWrite(byte[] payload)
        {
            this.SendCmdPacked((ushort)WsskCmd.DeployWrite, WsskCmdPack.DeployWrite, new object[] { payload });
        }

        
        /// <summary>
        /// Finish deployment.
        /// </summary>
        public void DeployFinish()
        {
            this.SendCmd((ushort)WsskCmd.DeployFinish);
        }

        
        /// <summary>
        /// Upload a labelled tuple of values to the cloud.
        /// The tuple will be automatically tagged with timestamp and originating device.
        /// </summary>
        public void C2d(WsskDataType datatype, string topic, byte[] payload)
        {
            this.SendCmdPacked((ushort)WsskCmd.C2d, WsskCmdPack.C2d, new object[] { datatype, topic, payload });
        }

        
        /// <summary>
        /// Sent both ways.
        /// </summary>
        public void JacdacPacket(byte[] frame)
        {
            this.SendCmdPacked((ushort)WsskCmd.JacdacPacket, WsskCmdPack.JacdacPacket, new object[] { frame });
        }

    }
}