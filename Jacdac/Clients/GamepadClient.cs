/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients
{
    public partial class GamepadClient
    {
        /// <summary>
        /// Gets the pressed button bitmask.
        /// If the joystick is analog, the directional buttons should be "simulated", based on joystick position
        /// (`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).
        /// If the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).
        /// </summary>
        public GamepadButtons Buttons
        {
            get
            {
                var direction = this.Direction;
                if (direction.Length != 3) return 0;
                return (GamepadButtons)(uint)direction[0];
            }
        }

        /// <summary>
        /// Gets the stick direction.
        /// If the joystick is analog, the directional buttons should be "simulated", based on joystick position
        /// (`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).
        /// If the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).
        /// </summary>
        public float X
        {
            get
            {
                var direction = this.Direction;
                if (direction.Length != 3) return 0;
                return (float)direction[1];
            }
        }

        /// <summary>
        /// Gets the stick direction.
        /// If the joystick is analog, the directional buttons should be "simulated", based on joystick position
        /// (`Left` is `{ x = -1, y = 0 }`, `Up` is `{ x = 0, y = -1}`).
        /// If the joystick is digital, then each direction will read as either `-1`, `0`, or `1` (in fixed representation).
        /// </summary>
        public float Y
        {
            get
            {
                var direction = this.Direction;
                if (direction.Length != 3) return 0;
                return (float)direction[2];
            }
        }

    }
}