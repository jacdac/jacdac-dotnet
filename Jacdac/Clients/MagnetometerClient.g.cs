/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A 3-axis magnetometer.
    /// Implements a client for the Magnetometer service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/magnetomer/" />
    public partial class MagnetometerClient : SensorClient
    {
        public MagnetometerClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Magnetometer)
        {
        }

        /// <summary>
        /// Reads the <c>forces</c> register value.
        /// Indicates the current magnetic field on magnetometer.
        /// For reference: `1 mgauss` is `100 nT` (and `1 gauss` is `100 000 nT`)., x: nT,y: nT,z: nT
        /// </summary>
        public object[] /*(int, int, int)*/ Forces
        {
            get
            {
                return (object[] /*(int, int, int)*/)this.GetRegisterValues((ushort)MagnetometerReg.Forces, MagnetometerRegPack.Forces);
            }
        }

        /// <summary>
        /// Tries to read the <c>forces_error</c> register value.
        /// Absolute estimated error on the readings., _: nT
        /// </summary>
        bool TryGetForcesError(out int value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)MagnetometerReg.ForcesError, MagnetometerRegPack.ForcesError, out values)) 
            {
                value = (int)values[0];
                return true;
            }
            else
            {
                value = default(int);
                return false;
            }
        }


        
        /// <summary>
        /// Forces a calibration sequence where the user/device
        /// might have to rotate to be calibrated.
        /// </summary>
        public void Calibrate()
        {
            this.SendCmd((ushort)MagnetometerCmd.Calibrate);
        }

    }
}