/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Supports aggregating timeseries data (especially sensor readings)
     /// and sending them to a cloud/storage service.
     /// Used in Jacscript.
     /// 
     /// Note that `f64` values are not necessarily aligned.
    /// Implements a client for the Timeseries Aggregator service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/timeseriesaggregator/" />
    public partial class TimeseriesAggregatorClient : Client
    {
        public TimeseriesAggregatorClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.TimeseriesAggregator)
        {
        }

        /// <summary>
        /// Reads the <c>now</c> register value.
        /// This can queried to establish local time on the device., _: us
        /// </summary>
        public uint Now
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)TimeseriesAggregatorReg.Now, TimeseriesAggregatorRegPack.Now);
            }
        }

        /// <summary>
        /// Reads the <c>fast_start</c> register value.
        /// When `true`, the windows will be shorter after service reset and gradually extend to requested length.
        /// This is ensure valid data is being streamed in program development., 
        /// </summary>
        public bool FastStart
        {
            get
            {
                return (bool)this.GetRegisterValueAsBool((ushort)TimeseriesAggregatorReg.FastStart, TimeseriesAggregatorRegPack.FastStart);
            }
            set
            {
                
                this.SetRegisterValue((ushort)TimeseriesAggregatorReg.FastStart, TimeseriesAggregatorRegPack.FastStart, value);
            }

        }

        /// <summary>
        /// Reads the <c>default_window</c> register value.
        /// Window for timeseries for which `set_window` was never called.
        /// Note that windows returned initially may be shorter if `fast_start` is enabled., _: ms
        /// </summary>
        public uint DefaultWindow
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)TimeseriesAggregatorReg.DefaultWindow, TimeseriesAggregatorRegPack.DefaultWindow);
            }
            set
            {
                
                this.SetRegisterValue((ushort)TimeseriesAggregatorReg.DefaultWindow, TimeseriesAggregatorRegPack.DefaultWindow, value);
            }

        }

        /// <summary>
        /// Reads the <c>default_upload</c> register value.
        /// Whether labelled timeseries for which `set_upload` was never called should be automatically uploaded., 
        /// </summary>
        public bool DefaultUpload
        {
            get
            {
                return (bool)this.GetRegisterValueAsBool((ushort)TimeseriesAggregatorReg.DefaultUpload, TimeseriesAggregatorRegPack.DefaultUpload);
            }
            set
            {
                
                this.SetRegisterValue((ushort)TimeseriesAggregatorReg.DefaultUpload, TimeseriesAggregatorRegPack.DefaultUpload, value);
            }

        }

        /// <summary>
        /// Reads the <c>upload_unlabelled</c> register value.
        /// Whether automatically created timeseries not bound in role manager should be uploaded., 
        /// </summary>
        public bool UploadUnlabelled
        {
            get
            {
                return (bool)this.GetRegisterValueAsBool((ushort)TimeseriesAggregatorReg.UploadUnlabelled, TimeseriesAggregatorRegPack.UploadUnlabelled);
            }
            set
            {
                
                this.SetRegisterValue((ushort)TimeseriesAggregatorReg.UploadUnlabelled, TimeseriesAggregatorRegPack.UploadUnlabelled, value);
            }

        }

        /// <summary>
        /// Reads the <c>sensor_watchdog_period</c> register value.
        /// If no data is received from any sensor within given period, the device is rebooted.
        /// Set to `0` to disable (default).
        /// Updating user-provided timeseries does not reset the watchdog., _: ms
        /// </summary>
        public uint SensorWatchdogPeriod
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)TimeseriesAggregatorReg.SensorWatchdogPeriod, TimeseriesAggregatorRegPack.SensorWatchdogPeriod);
            }
            set
            {
                
                this.SetRegisterValue((ushort)TimeseriesAggregatorReg.SensorWatchdogPeriod, TimeseriesAggregatorRegPack.SensorWatchdogPeriod, value);
            }

        }


        
        /// <summary>
        /// Remove all pending timeseries.
        /// </summary>
        public void Clear()
        {
            this.SendCmd((ushort)TimeseriesAggregatorCmd.Clear);
        }

        
        /// <summary>
        /// Add a data point to a timeseries.
        /// </summary>
        public void Update(float value, string label)
        {
            this.SendCmdPacked((ushort)TimeseriesAggregatorCmd.Update, TimeseriesAggregatorCmdPack.Update, new object[] { value, label });
        }

        
        /// <summary>
        /// Set aggregation window.
        /// Setting to `0` will restore default.
        /// </summary>
        public void SetWindow(uint duration, string label)
        {
            this.SendCmdPacked((ushort)TimeseriesAggregatorCmd.SetWindow, TimeseriesAggregatorCmdPack.SetWindow, new object[] { duration, label });
        }

        
        /// <summary>
        /// Set whether or not the timeseries will be uploaded to the cloud.
        /// The `stored` reports are generated regardless.
        /// </summary>
        public void SetUpload(bool upload, string label)
        {
            this.SendCmdPacked((ushort)TimeseriesAggregatorCmd.SetUpload, TimeseriesAggregatorCmdPack.SetUpload, new object[] { upload, label });
        }

    }
}