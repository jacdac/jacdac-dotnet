/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Supports aggregating timeseries data (especially sensor readings)
     /// and sending them to a cloud/storage service.
     /// Used in Jacscript.
     /// 
     /// Note that `f64` values following a label are not necessarily aligned.
    /// Implements a client for the Timeseries Aggregator service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/timeseriesaggregator/" />
    public partial class TimeseriesAggregatorClient : Client
    {
        public TimeseriesAggregatorClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.TimeseriesAggregator)
        {
        }

        /// <summary>
        /// Reads the <c>now</c> register value.
        /// This register is automatically broadcast and can be also queried to establish local time on the device., _: ms
        /// </summary>
        public uint Now
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)TimeseriesAggregatorReg.Now, TimeseriesAggregatorRegPack.Now);
            }
        }


        
        /// <summary>
        /// Remove all pending timeseries.
        /// </summary>
        public void Clear()
        {
            this.SendCmd((ushort)TimeseriesAggregatorCmd.Clear);
        }

        
        /// <summary>
        /// Starts a new timeseries.
        /// `service_number` is the number of services with the same `service_class`
        /// and lower service index on `sensor_id`.
        /// If `sensor_id` or `service_class` are unknown they can be `0`.
        /// If label is missing, it can be empty string.
        /// As for `mode`,
        /// `Continuous` has default aggregation window of 60s,
        /// and `Discrete` only stores the data if it has changed since last store,
        /// and has default window of 1s.
        /// </summary>
        public void StartTimeseries(uint id, uint service_class, byte[] sensor_id, uint service_number, TimeseriesAggregatorDataMode mode, string label)
        {
            this.SendCmdPacked((ushort)TimeseriesAggregatorCmd.StartTimeseries, TimeseriesAggregatorCmdPack.StartTimeseries, new object[] { id, service_class, sensor_id, service_number, mode, label });
        }

        
        /// <summary>
        /// Add a data point to a timeseries.
        /// </summary>
        public void Update(float value, uint id)
        {
            this.SendCmdPacked((ushort)TimeseriesAggregatorCmd.Update, TimeseriesAggregatorCmdPack.Update, new object[] { value, id });
        }

        
        /// <summary>
        /// Set aggregation window.
        /// </summary>
        public void SetWindow(uint id, uint duration)
        {
            this.SendCmdPacked((ushort)TimeseriesAggregatorCmd.SetWindow, TimeseriesAggregatorCmdPack.SetWindow, new object[] { id, duration });
        }

    }
}