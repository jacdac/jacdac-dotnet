/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A controller for small displays of individually controlled RGB LEDs.
    /// Implements a client for the LED Display service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/leddisplay/" />
    public partial class LedDisplayClient : Client
    {
        public LedDisplayClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.LedDisplay)
        {
        }

        /// <summary>
        /// Reads the <c>pixels</c> register value.
        /// For short LED strips, less than `max_pixels_length`, a buffer of 24bit RGB color entries for each LED., 
        /// </summary>
        public byte[] Pixels
        {
            get
            {
                return (byte[])this.GetRegisterValue((ushort)LedDisplayReg.Pixels, LedDisplayRegPack.Pixels);
            }
            set
            {
                
                this.SetRegisterValue((ushort)LedDisplayReg.Pixels, LedDisplayRegPack.Pixels, value);
            }

        }

        /// <summary>
        /// Reads the <c>brightness</c> register value.
        /// Set the luminosity of the strip.
        /// At `0` the power to the strip is completely shut down., _: /
        /// </summary>
        public float Brightness
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)LedDisplayReg.Brightness, LedDisplayRegPack.Brightness);
            }
            set
            {
                
                this.SetRegisterValue((ushort)LedDisplayReg.Brightness, LedDisplayRegPack.Brightness, value);
            }

        }

        /// <summary>
        /// Reads the <c>actual_brightness</c> register value.
        /// This is the luminosity actually applied to the strip.
        /// May be lower than `brightness` if power-limited by the `max_power` register.
        /// It will rise slowly (few seconds) back to `brightness` is limits are no longer required., _: /
        /// </summary>
        public float ActualBrightness
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)LedDisplayReg.ActualBrightness, LedDisplayRegPack.ActualBrightness);
            }
        }

        /// <summary>
        /// Reads the <c>light_type</c> register value.
        /// Specifies the type of light strip connected to controller.
        /// Controllers which are sold with lights should default to the correct type
        /// and could not allow change., 
        /// </summary>
        public LedDisplayLightType LightType
        {
            get
            {
                return (LedDisplayLightType)this.GetRegisterValue((ushort)LedDisplayReg.LightType, LedDisplayRegPack.LightType);
            }
        }

        /// <summary>
        /// Reads the <c>num_pixels</c> register value.
        /// Specifies the number of pixels in the strip.
        /// Controllers which are sold with lights should default to the correct length
        /// and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot., _: #
        /// </summary>
        public uint NumPixels
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)LedDisplayReg.NumPixels, LedDisplayRegPack.NumPixels);
            }
        }

        /// <summary>
        /// Tries to read the <c>num_columns</c> register value.
        /// If the LED pixel strip is a matrix, specifies the number of columns. Otherwise, a square shape is assumed. Controllers which are sold with lights should default to the correct length
        /// and could not allow change. Increasing length at runtime leads to ineffective use of memory and may lead to controller reboot., _: #
        /// </summary>
        bool TryGetNumColumns(out uint value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)LedDisplayReg.NumColumns, LedDisplayRegPack.NumColumns, out values)) 
            {
                value = (uint)values[0];
                return true;
            }
            else
            {
                value = default(uint);
                return false;
            }
        }

        /// <summary>
        /// Reads the <c>max_power</c> register value.
        /// Limit the power drawn by the light-strip (and controller)., _: mA
        /// </summary>
        public uint MaxPower
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)LedDisplayReg.MaxPower, LedDisplayRegPack.MaxPower);
            }
            set
            {
                
                this.SetRegisterValue((ushort)LedDisplayReg.MaxPower, LedDisplayRegPack.MaxPower, value);
            }

        }

        /// <summary>
        /// Tries to read the <c>variant</c> register value.
        /// Specifies the shape of the light strip., 
        /// </summary>
        bool TryGetVariant(out LedDisplayVariant value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)LedDisplayReg.Variant, LedDisplayRegPack.Variant, out values)) 
            {
                value = (LedDisplayVariant)values[0];
                return true;
            }
            else
            {
                value = default(LedDisplayVariant);
                return false;
            }
        }


    }
}