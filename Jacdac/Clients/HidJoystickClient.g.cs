/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Controls a HID joystick.
    /// Implements a client for the HID Joystick service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/hidjoystick/" />
    public partial class HidJoystickClient : Client
    {
        public HidJoystickClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.HidJoystick)
        {
        }

        /// <summary>
        /// Tries to read the <c>button_count</c> register value.
        /// Number of button report supported, 
        /// </summary>
        bool TryGetButtonCount(out uint value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)HidJoystickReg.ButtonCount, HidJoystickRegPack.ButtonCount, out values)) 
            {
                value = (uint)values[0];
                return true;
            }
            else
            {
                value = default(uint);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>buttons_analog</c> register value.
        /// A bitset that indicates which button is analog., 
        /// </summary>
        bool TryGetButtonsAnalog(out uint value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)HidJoystickReg.ButtonsAnalog, HidJoystickRegPack.ButtonsAnalog, out values)) 
            {
                value = (uint)values[0];
                return true;
            }
            else
            {
                value = default(uint);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>axis_count</c> register value.
        /// Number of analog input supported, 
        /// </summary>
        bool TryGetAxisCount(out uint value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)HidJoystickReg.AxisCount, HidJoystickRegPack.AxisCount, out values)) 
            {
                value = (uint)values[0];
                return true;
            }
            else
            {
                value = default(uint);
                return false;
            }
        }


    }
}