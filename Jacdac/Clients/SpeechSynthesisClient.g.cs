/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A speech synthesizer
    /// Implements a client for the Speech synthesis service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/speechsynthesis/" />
    public partial class SpeechSynthesisClient : Client
    {
        public SpeechSynthesisClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.SpeechSynthesis)
        {
        }

        /// <summary>
        /// Reads the <c>enabled</c> register value.
        /// Determines if the speech engine is in a non-paused state., 
        /// </summary>
        public bool Enabled
        {
            get
            {
                return (bool)this.GetRegisterValueAsBool((ushort)SpeechSynthesisReg.Enabled, SpeechSynthesisRegPack.Enabled);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SpeechSynthesisReg.Enabled, SpeechSynthesisRegPack.Enabled, value);
            }

        }

        /// <summary>
        /// Tries to read the <c>lang</c> register value.
        /// Language used for utterances as defined in https://www.ietf.org/rfc/bcp/bcp47.txt., 
        /// </summary>
        bool TryGetLang(out string value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)SpeechSynthesisReg.Lang, SpeechSynthesisRegPack.Lang, out values)) 
            {
                value = (string)values[0];
                return true;
            }
            else
            {
                value = default(string);
                return false;
            }
        }
        
        /// <summary>
        /// Sets the lang value
        /// </summary>
        public void SetLang(string value)
        {
            this.SetRegisterValue((ushort)SpeechSynthesisReg.Lang, SpeechSynthesisRegPack.Lang, value);
        }


        /// <summary>
        /// Tries to read the <c>volume</c> register value.
        /// Volume for utterances., _: /
        /// </summary>
        bool TryGetVolume(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)SpeechSynthesisReg.Volume, SpeechSynthesisRegPack.Volume, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }
        
        /// <summary>
        /// Sets the volume value
        /// </summary>
        public void SetVolume(float value)
        {
            this.SetRegisterValue((ushort)SpeechSynthesisReg.Volume, SpeechSynthesisRegPack.Volume, value);
        }


        /// <summary>
        /// Tries to read the <c>pitch</c> register value.
        /// Pitch for utterances, 
        /// </summary>
        bool TryGetPitch(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)SpeechSynthesisReg.Pitch, SpeechSynthesisRegPack.Pitch, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }
        
        /// <summary>
        /// Sets the pitch value
        /// </summary>
        public void SetPitch(float value)
        {
            this.SetRegisterValue((ushort)SpeechSynthesisReg.Pitch, SpeechSynthesisRegPack.Pitch, value);
        }


        /// <summary>
        /// Tries to read the <c>rate</c> register value.
        /// Rate for utterances, 
        /// </summary>
        bool TryGetRate(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)SpeechSynthesisReg.Rate, SpeechSynthesisRegPack.Rate, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }
        
        /// <summary>
        /// Sets the rate value
        /// </summary>
        public void SetRate(float value)
        {
            this.SetRegisterValue((ushort)SpeechSynthesisReg.Rate, SpeechSynthesisRegPack.Rate, value);
        }



        
        /// <summary>
        /// Adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.
        /// </summary>
        public void Speak(string text)
        {
            this.SendCmdPacked((ushort)SpeechSynthesisCmd.Speak, SpeechSynthesisCmdPack.Speak, new object[] { text });
        }

        
        /// <summary>
        /// Cancels current utterance and all utterances from the utterance queue.
        /// </summary>
        public void Cancel()
        {
            this.SendCmd((ushort)SpeechSynthesisCmd.Cancel);
        }

    }
}