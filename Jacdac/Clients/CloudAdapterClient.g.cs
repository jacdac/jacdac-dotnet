/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Supports cloud connections to upload and download data.
     /// Note that `f64` values following a label are not necessarily aligned.
    /// Implements a client for the Cloud Adapter service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/cloudadapter/" />
    public partial class CloudAdapterClient : Client
    {
        public CloudAdapterClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.CloudAdapter)
        {
        }

        /// <summary>
        /// Reads the <c>connected</c> register value.
        /// Indicate whether we're currently connected to the cloud server.
        /// When offline, `upload` commands are queued, and `get_twin` respond with cached values., 
        /// </summary>
        public bool Connected
        {
            get
            {
                return (bool)this.GetRegisterValueAsBool((ushort)CloudAdapterReg.Connected, CloudAdapterRegPack.Connected);
            }
        }

        /// <summary>
        /// Reads the <c>connection_name</c> register value.
        /// User-friendly name of the connection, typically includes name of the server
        /// and/or type of cloud service (`"something.cloud.net (Provider IoT)"`)., 
        /// </summary>
        public string ConnectionName
        {
            get
            {
                return (string)this.GetRegisterValue((ushort)CloudAdapterReg.ConnectionName, CloudAdapterRegPack.ConnectionName);
            }
        }

        /// <summary>
        /// Emitted when cloud requests to run some action.
        /// </summary>
        public event ClientEventHandler CloudCommand
        {
            add
            {
                this.AddEvent((ushort)CloudAdapterEvent.CloudCommand, value);
            }
            remove
            {
                this.RemoveEvent((ushort)CloudAdapterEvent.CloudCommand, value);
            }
        }

        /// <summary>
        /// Emitted when we connect or disconnect from the cloud.
        /// </summary>
        public event ClientEventHandler Change
        {
            add
            {
                this.AddEvent((ushort)CloudAdapterEvent.Change, value);
            }
            remove
            {
                this.RemoveEvent((ushort)CloudAdapterEvent.Change, value);
            }
        }


    }
}