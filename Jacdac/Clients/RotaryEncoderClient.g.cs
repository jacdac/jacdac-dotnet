/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// An incremental rotary encoder - converts angular motion of a shaft to digital signal.
    /// Implements a client for the Rotary encoder service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/rotaryencoder/" />
    public partial class RotaryEncoderClient : SensorClient
    {
        public RotaryEncoderClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.RotaryEncoder)
        {
        }

        /// <summary>
        /// Reads the <c>position</c> register value.
        /// Upon device reset starts at `0` (regardless of the shaft position).
        /// Increases by `1` for a clockwise "click", by `-1` for counter-clockwise., _: #
        /// </summary>
        public int Position
        {
            get
            {
                return (int)this.GetRegisterValue((ushort)RotaryEncoderReg.Position, RotaryEncoderRegPack.Position);
            }
        }

        /// <summary>
        /// Reads the <c>clicks_per_turn</c> register value.
        /// This specifies by how much `position` changes when the crank does 360 degree turn. Typically 12 or 24., _: #
        /// </summary>
        public uint ClicksPerTurn
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)RotaryEncoderReg.ClicksPerTurn, RotaryEncoderRegPack.ClicksPerTurn);
            }
        }

        /// <summary>
        /// Tries to read the <c>clicker</c> register value.
        /// The encoder is combined with a clicker. If this is the case, the clicker button service
        /// should follow this service in the service list of the device., 
        /// </summary>
        bool TryGetClicker(out bool value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)RotaryEncoderReg.Clicker, RotaryEncoderRegPack.Clicker, out values)) 
            {
                value = (bool)values[0];
                return true;
            }
            else
            {
                value = default(bool);
                return false;
            }
        }


    }
}