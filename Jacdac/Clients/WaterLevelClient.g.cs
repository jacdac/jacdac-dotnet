/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A sensor that measures liquid/water level.
    /// Implements a client for the Water level service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/waterlevel/" />
    public partial class WaterLevelClient : SensorClient
    {
        public WaterLevelClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.WaterLevel)
        {
        }

        /// <summary>
        /// Reads the <c>level</c> register value.
        /// The reported water level., _: /
        /// </summary>
        public float Level
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WaterLevelReg.Level, WaterLevelRegPack.Level);
            }
        }

        /// <summary>
        /// Tries to read the <c>level_error</c> register value.
        /// The error rage on the current reading, _: /
        /// </summary>
        bool TryGetLevelError(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WaterLevelReg.LevelError, WaterLevelRegPack.LevelError, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>variant</c> register value.
        /// The type of physical sensor., 
        /// </summary>
        bool TryGetVariant(out WaterLevelVariant value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WaterLevelReg.Variant, WaterLevelRegPack.Variant, out values)) 
            {
                value = (WaterLevelVariant)values[0];
                return true;
            }
            else
            {
                value = default(WaterLevelVariant);
                return false;
            }
        }


    }
}