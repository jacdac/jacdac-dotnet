/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// The UV Index is a measure of the intensity of ultraviolet (UV) rays from the Sun.
    /// Implements a client for the UV index service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/uvindex/" />
    public partial class UvIndexClient : SensorClient
    {
        public UvIndexClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.UvIndex)
        {
        }

        /// <summary>
        /// Reads the <c>uv_index</c> register value.
        /// Ultraviolet index, typically refreshed every second., _: uv
        /// </summary>
        public float UvIndex
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)UvIndexReg.UvIndex, UvIndexRegPack.UvIndex);
            }
        }

        /// <summary>
        /// Tries to read the <c>uv_index_error</c> register value.
        /// Error on the UV measure., _: uv
        /// </summary>
        bool TryGetUvIndexError(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)UvIndexReg.UvIndexError, UvIndexRegPack.UvIndexError, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>variant</c> register value.
        /// The type of physical sensor and capabilities., 
        /// </summary>
        bool TryGetVariant(out UvIndexVariant value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)UvIndexReg.Variant, UvIndexRegPack.Variant, out values)) 
            {
                value = (UvIndexVariant)values[0];
                return true;
            }
            else
            {
                value = default(UvIndexVariant);
                return false;
            }
        }


    }
}