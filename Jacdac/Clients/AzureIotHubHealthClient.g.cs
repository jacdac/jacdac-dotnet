/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Health and diagnostics information about the Azure Iot Hub connection.
    /// Implements a client for the Azure IoT Hub Health service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/azureiothubhealth/" />
    public partial class AzureIotHubHealthClient : Client
    {
        public AzureIotHubHealthClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.AzureIotHubHealth)
        {
        }

        /// <summary>
        /// Tries to read the <c>hub_name</c> register value.
        /// Something like `my-iot-hub.azure-devices.net` if available., 
        /// </summary>
        bool TryGetHubName(out string value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)AzureIotHubHealthReg.HubName, AzureIotHubHealthRegPack.HubName, out values)) 
            {
                value = (string)values[0];
                return true;
            }
            else
            {
                value = default(string);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>hub_device_id</c> register value.
        /// Device identifier in Azure Iot Hub if available., 
        /// </summary>
        bool TryGetHubDeviceId(out string value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)AzureIotHubHealthReg.HubDeviceId, AzureIotHubHealthRegPack.HubDeviceId, out values)) 
            {
                value = (string)values[0];
                return true;
            }
            else
            {
                value = default(string);
                return false;
            }
        }

        /// <summary>
        /// Reads the <c>connection_status</c> register value.
        /// Indicates the status of connection. A message beyond the [0..3] range represents an HTTP error code., 
        /// </summary>
        public AzureIotHubHealthConnectionStatus ConnectionStatus
        {
            get
            {
                return (AzureIotHubHealthConnectionStatus)this.GetRegisterValue((ushort)AzureIotHubHealthReg.ConnectionStatus, AzureIotHubHealthRegPack.ConnectionStatus);
            }
        }

        /// <summary>
        /// Reads the <c>push_period</c> register value.
        /// How often to push data to the cloud., _: ms
        /// </summary>
        public uint PushPeriod
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)AzureIotHubHealthReg.PushPeriod, AzureIotHubHealthRegPack.PushPeriod);
            }
            set
            {
                
                this.SetRegisterValue((ushort)AzureIotHubHealthReg.PushPeriod, AzureIotHubHealthRegPack.PushPeriod, value);
            }

        }

        /// <summary>
        /// Reads the <c>push_watchdog_period</c> register value.
        /// If no message is published within given period, the device resets.
        /// This can be due to connectivity problems or due to the device having nothing to publish.
        /// Forced to be at least `2 * flush_period`.
        /// Set to `0` to disable (default)., _: ms
        /// </summary>
        public uint PushWatchdogPeriod
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)AzureIotHubHealthReg.PushWatchdogPeriod, AzureIotHubHealthRegPack.PushWatchdogPeriod);
            }
            set
            {
                
                this.SetRegisterValue((ushort)AzureIotHubHealthReg.PushWatchdogPeriod, AzureIotHubHealthRegPack.PushWatchdogPeriod, value);
            }

        }

        /// <summary>
        /// Raised when the connection status changes
        /// </summary>
        public event ClientEventHandler ConnectionStatusChange
        {
            add
            {
                this.AddEvent((ushort)AzureIotHubHealthEvent.ConnectionStatusChange, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AzureIotHubHealthEvent.ConnectionStatusChange, value);
            }
        }

        /// <summary>
        /// Raised when a message has been sent to the hub.
        /// </summary>
        public event ClientEventHandler MessageSent
        {
            add
            {
                this.AddEvent((ushort)AzureIotHubHealthEvent.MessageSent, value);
            }
            remove
            {
                this.RemoveEvent((ushort)AzureIotHubHealthEvent.MessageSent, value);
            }
        }


    }
}