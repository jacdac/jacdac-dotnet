/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// Access to General Purpose Input/Output (GPIO) pins on a board.
     /// The pins are indexed `0 ... num_pins-1`.
     /// The indexing does not correspond to hardware pin names, nor labels on the board (see `get_pin_info` command for that),
     /// and should **not** be exposed to the user.
    /// Implements a client for the GPIO service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/gpio/" />
    public partial class GPIOClient : SensorClient
    {
        public GPIOClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.GPIO)
        {
        }

        /// <summary>
        /// Reads the <c>state</c> register value.
        /// For every pin set to `Input*` the corresponding **bit** in `digital_values` will be `1` if and only if
        /// the pin is high.
        /// For other pins, the bit is `0`.
        /// This is normally streamed at low-ish speed, but it's also automatically reported whenever
        /// a digital input pin changes value (throttled to ~100Hz).
        /// The analog values can be read with the `ADC` service., 
        /// </summary>
        public byte[] State
        {
            get
            {
                return (byte[])this.GetRegisterValue((ushort)GPIOReg.State, GPIORegPack.State);
            }
        }

        /// <summary>
        /// Reads the <c>num_pins</c> register value.
        /// Number of pins that can be operated through this service., _: #
        /// </summary>
        public uint NumPins
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)GPIOReg.NumPins, GPIORegPack.NumPins);
            }
        }


        
        /// <summary>
        /// Report capabilities and name of a pin.
        /// </summary>
        public void PinInfo(uint pin)
        {
            this.SendCmdPacked((ushort)GPIOCmd.PinInfo, GPIOCmdPack.PinInfo, new object[] { pin });
        }

        
        /// <summary>
        /// This responds with `pin_info` report.
        /// </summary>
        public void PinByLabel(string label)
        {
            this.SendCmdPacked((ushort)GPIOCmd.PinByLabel, GPIOCmdPack.PinByLabel, new object[] { label });
        }

        
        /// <summary>
        /// This responds with `pin_info` report.
        /// </summary>
        public void PinByHwPin(uint hw_pin)
        {
            this.SendCmdPacked((ushort)GPIOCmd.PinByHwPin, GPIOCmdPack.PinByHwPin, new object[] { hw_pin });
        }

    }
}