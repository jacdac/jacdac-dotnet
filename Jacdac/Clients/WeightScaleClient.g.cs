/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A weight measuring sensor.
    /// Implements a client for the Weight Scale service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/weightscale/" />
    public partial class WeightScaleClient : SensorClient
    {
        public WeightScaleClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.WeightScale)
        {
        }

        /// <summary>
        /// Reads the <c>weight</c> register value.
        /// The reported weight., _: kg
        /// </summary>
        public float Weight
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)WeightScaleReg.Weight, WeightScaleRegPack.Weight);
            }
        }

        /// <summary>
        /// Tries to read the <c>weight_error</c> register value.
        /// The estimate error on the reported reading., _: kg
        /// </summary>
        bool TryGetWeightError(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WeightScaleReg.WeightError, WeightScaleRegPack.WeightError, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>zero_offset</c> register value.
        /// Calibrated zero offset error on the scale, i.e. the measured weight when nothing is on the scale.
        /// You do not need to subtract that from the reading, it has already been done., _: kg
        /// </summary>
        bool TryGetZeroOffset(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WeightScaleReg.ZeroOffset, WeightScaleRegPack.ZeroOffset, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }
        
        /// <summary>
        /// Sets the zero_offset value
        /// </summary>
        public void SetZeroOffset(float value)
        {
            this.SetRegisterValue((ushort)WeightScaleReg.ZeroOffset, WeightScaleRegPack.ZeroOffset, value);
        }


        /// <summary>
        /// Tries to read the <c>gain</c> register value.
        /// Calibrated gain on the weight scale error., 
        /// </summary>
        bool TryGetGain(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WeightScaleReg.Gain, WeightScaleRegPack.Gain, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }
        
        /// <summary>
        /// Sets the gain value
        /// </summary>
        public void SetGain(float value)
        {
            this.SetRegisterValue((ushort)WeightScaleReg.Gain, WeightScaleRegPack.Gain, value);
        }


        /// <summary>
        /// Tries to read the <c>max_weight</c> register value.
        /// Maximum supported weight on the scale., _: kg
        /// </summary>
        bool TryGetMaxWeight(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WeightScaleReg.MaxWeight, WeightScaleRegPack.MaxWeight, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>min_weight</c> register value.
        /// Minimum recommend weight on the scale., _: kg
        /// </summary>
        bool TryGetMinWeight(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WeightScaleReg.MinWeight, WeightScaleRegPack.MinWeight, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>weight_resolution</c> register value.
        /// Smallest, yet distinguishable change in reading., _: kg
        /// </summary>
        bool TryGetWeightResolution(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WeightScaleReg.WeightResolution, WeightScaleRegPack.WeightResolution, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>variant</c> register value.
        /// The type of physical scale, 
        /// </summary>
        bool TryGetVariant(out WeightScaleVariant value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)WeightScaleReg.Variant, WeightScaleRegPack.Variant, out values)) 
            {
                value = (WeightScaleVariant)values[0];
                return true;
            }
            else
            {
                value = default(WeightScaleVariant);
                return false;
            }
        }


        
        /// <summary>
        /// Call this command when there is nothing on the scale. If supported, the module should save the calibration data.
        /// </summary>
        public void CalibrateZeroOffset()
        {
            this.SendCmd((ushort)WeightScaleCmd.CalibrateZeroOffset);
        }

        
        /// <summary>
        /// Call this command with the weight of the thing on the scale.
        /// </summary>
        public void CalibrateGain(float weight)
        {
            this.SendCmdPacked((ushort)WeightScaleCmd.CalibrateGain, WeightScaleCmdPack.CalibrateGain, new object[] { weight });
        }

    }
}