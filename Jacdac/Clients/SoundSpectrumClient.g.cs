/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A microphone that analyzes the sound specturm
    /// Implements a client for the Sound Spectrum service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/soundspectrum/" />
    public partial class SoundSpectrumClient : SensorClient
    {
        public SoundSpectrumClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.SoundSpectrum)
        {
        }

        /// <summary>
        /// Reads the <c>frequency_bins</c> register value.
        /// The computed frequency data., 
        /// </summary>
        public byte[] FrequencyBins
        {
            get
            {
                return (byte[])this.GetRegisterValue((ushort)SoundSpectrumReg.FrequencyBins, SoundSpectrumRegPack.FrequencyBins);
            }
        }

        /// <summary>
        /// Reads the <c>enabled</c> register value.
        /// Turns on/off the micropohone., 
        /// </summary>
        public bool Enabled
        {
            get
            {
                return (bool)this.GetRegisterValue((ushort)SoundSpectrumReg.Enabled, SoundSpectrumRegPack.Enabled);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SoundSpectrumReg.Enabled, SoundSpectrumRegPack.Enabled, value);
            }

        }

        /// <summary>
        /// Reads the <c>fft_pow2_size</c> register value.
        /// The power of 2 used as the size of the FFT to be used to determine the frequency domain., 
        /// </summary>
        public uint FftPow2Size
        {
            get
            {
                return (uint)this.GetRegisterValue((ushort)SoundSpectrumReg.FftPow2Size, SoundSpectrumRegPack.FftPow2Size);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SoundSpectrumReg.FftPow2Size, SoundSpectrumRegPack.FftPow2Size, value);
            }

        }

        /// <summary>
        /// Reads the <c>min_decibels</c> register value.
        /// The minimum power value in the scaling range for the FFT analysis data, _: dB
        /// </summary>
        public int MinDecibels
        {
            get
            {
                return (int)this.GetRegisterValue((ushort)SoundSpectrumReg.MinDecibels, SoundSpectrumRegPack.MinDecibels);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SoundSpectrumReg.MinDecibels, SoundSpectrumRegPack.MinDecibels, value);
            }

        }

        /// <summary>
        /// Reads the <c>max_decibels</c> register value.
        /// The maximum power value in the scaling range for the FFT analysis data, _: dB
        /// </summary>
        public int MaxDecibels
        {
            get
            {
                return (int)this.GetRegisterValue((ushort)SoundSpectrumReg.MaxDecibels, SoundSpectrumRegPack.MaxDecibels);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SoundSpectrumReg.MaxDecibels, SoundSpectrumRegPack.MaxDecibels, value);
            }

        }

        /// <summary>
        /// Reads the <c>smoothing_time_constant</c> register value.
        /// The averaging constant with the last analysis frame.
        /// If `0` is set, there is no averaging done, whereas a value of `1` means "overlap the previous and current buffer quite a lot while computing the value"., _: /
        /// </summary>
        public float SmoothingTimeConstant
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)SoundSpectrumReg.SmoothingTimeConstant, SoundSpectrumRegPack.SmoothingTimeConstant);
            }
            set
            {
                
                this.SetRegisterValue((ushort)SoundSpectrumReg.SmoothingTimeConstant, SoundSpectrumRegPack.SmoothingTimeConstant, value);
            }

        }


    }
}