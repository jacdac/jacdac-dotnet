/** Autogenerated file. Do not edit. */
using Jacdac;
using System;

namespace Jacdac.Clients 
{
    /// <summary>
    /// A sensor that determines the distance of an object without any physical contact involved.
    /// Implements a client for the Distance service.
    /// </summary>
    /// <seealso cref="https://microsoft.github.io/jacdac-docs/services/distance/" />
    public partial class DistanceClient : SensorClient
    {
        public DistanceClient(JDBus bus, string name)
            : base(bus, name, ServiceClasses.Distance)
        {
        }

        /// <summary>
        /// Reads the <c>distance</c> register value.
        /// Current distance from the object, _: m
        /// </summary>
        public float Distance
        {
            get
            {
                return (float)this.GetRegisterValue((ushort)DistanceReg.Distance, DistanceRegPack.Distance);
            }
        }

        /// <summary>
        /// Tries to read the <c>distance_error</c> register value.
        /// Absolute error on the reading value., _: m
        /// </summary>
        bool TryGetDistanceError(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DistanceReg.DistanceError, DistanceRegPack.DistanceError, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>min_range</c> register value.
        /// Minimum measurable distance, _: m
        /// </summary>
        bool TryGetMinRange(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DistanceReg.MinRange, DistanceRegPack.MinRange, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>max_range</c> register value.
        /// Maximum measurable distance, _: m
        /// </summary>
        bool TryGetMaxRange(out float value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DistanceReg.MaxRange, DistanceRegPack.MaxRange, out values)) 
            {
                value = (float)values[0];
                return true;
            }
            else
            {
                value = default(float);
                return false;
            }
        }

        /// <summary>
        /// Tries to read the <c>variant</c> register value.
        /// Determines the type of sensor used., 
        /// </summary>
        bool TryGetVariant(out DistanceVariant value)
        {
            object[] values;
            if (this.TryGetRegisterValues((ushort)DistanceReg.Variant, DistanceRegPack.Variant, out values)) 
            {
                value = (DistanceVariant)values[0];
                return true;
            }
            else
            {
                value = default(DistanceVariant);
                return false;
            }
        }


    }
}